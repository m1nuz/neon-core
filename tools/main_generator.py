#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-n','--names', nargs='+', help='<Required> Set names', required=True)
parser.add_argument('-s','--startup')

args = parser.parse_args()

with open('%s' % 'main.c', 'wb') as f:
    f.write(bytes('''// WARNING: Do not change main.c, the file is automatically generated when building
// Generated by main_generato.py

#ifndef APP_LOG
#define APP_LOG NULL
#endif

#ifndef APP_TITLE
#define APP_TITLE "Neon-engine application"
#endif

#include <neon.h>
#include <memtrack.h>
\n\n''', 'utf8'))
    if args.startup:
        f.write(bytes("extern int {0}(int argc, char *argv[]);\n".format(args.startup), 'utf8'))
    for name in args.names:
        f.write(bytes("extern int {0}_on_init(void);\n".format(name), 'utf8'))
        f.write(bytes("extern void {0}_on_update(float);\n".format(name), 'utf8'))
        f.write(bytes("extern void {0}_on_present(int, int, float);\n".format(name), 'utf8'))
        f.write(bytes("extern void {0}_on_event(const SDL_Event *event);\n".format(name), 'utf8'))
        f.write(bytes("extern void {0}_on_cleanup(void);\n\n".format(name), 'utf8'))
    f.write(bytes('APP_STATE states[] = {\n', 'utf8'))
    for name in args.names:
        f.write(bytes("    {{{0}_on_init, {0}_on_update, {0}_on_present, {0}_on_event, {0}_on_cleanup}},\n".format(name), 'utf8'))
    f.write(bytes('};\n', 'utf8'))
    f.write(bytes('''extern int main(int argc, char *argv[]) {\n''', 'utf8'))
    if args.startup:
        f.write(bytes("    {0}(argc, argv);".format(args.startup), 'utf8'))
    f.write(bytes('''    LOG_INIT(APP_LOG);
    MEMTRACK_INIT();
    return application_exec(APP_TITLE, states, countof(states));
}''', 'utf8'))
